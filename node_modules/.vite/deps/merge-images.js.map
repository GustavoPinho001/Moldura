{
  "version": 3,
  "sources": ["../../merge-images/src/index.js"],
  "sourcesContent": ["// Defaults\nconst defaultOptions = {\n\tformat: 'image/png',\n\tquality: 0.92,\n\twidth: undefined,\n\theight: undefined,\n\tCanvas: undefined,\n\tcrossOrigin: undefined\n};\n\n// Return Promise\nconst mergeImages = (sources = [], options = {}) => new Promise(resolve => {\n\toptions = Object.assign({}, defaultOptions, options);\n\n\t// Setup browser/Node.js specific variables\n\tconst canvas = options.Canvas ? new options.Canvas() : window.document.createElement('canvas');\n\tconst Image = options.Image || window.Image;\n\n\t// Load sources\n\tconst images = sources.map(source => new Promise((resolve, reject) => {\n\t\t// Convert sources to objects\n\t\tif (source.constructor.name !== 'Object') {\n\t\t\tsource = { src: source };\n\t\t}\n\n\t\t// Resolve source and img when loaded\n\t\tconst img = new Image();\n\t\timg.crossOrigin = options.crossOrigin;\n\t\timg.onerror = () => reject(new Error('Couldn\\'t load image'));\n\t\timg.onload = () => resolve(Object.assign({}, source, { img }));\n\t\timg.src = source.src;\n\t}));\n\n\t// Get canvas context\n\tconst ctx = canvas.getContext('2d');\n\n\t// When sources have loaded\n\tresolve(Promise.all(images)\n\t\t.then(images => {\n\t\t\t// Set canvas dimensions\n\t\t\tconst getSize = dim => options[dim] || Math.max(...images.map(image => image.img[dim]));\n\t\t\tcanvas.width = getSize('width');\n\t\t\tcanvas.height = getSize('height');\n\n\t\t\t// Draw images to canvas\n\t\t\timages.forEach(image => {\n\t\t\t\tctx.globalAlpha = image.opacity ? image.opacity : 1;\n\t\t\t\treturn ctx.drawImage(image.img, image.x || 0, image.y || 0);\n\t\t\t});\n\n\t\t\tif (options.Canvas && options.format === 'image/jpeg') {\n\t\t\t\t// Resolve data URI for node-canvas jpeg async\n\t\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\t\tcanvas.toDataURL(options.format, {\n\t\t\t\t\t\tquality: options.quality,\n\t\t\t\t\t\tprogressive: false\n\t\t\t\t\t}, (err, jpeg) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\treject(err);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresolve(jpeg);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Resolve all other data URIs sync\n\t\t\treturn canvas.toDataURL(options.format, options.quality);\n\t\t}));\n});\n\nexport default mergeImages;\n"],
  "mappings": ";;;AACAA,IAAM,iBAAiB;EACtB,QAAQ;EACR,SAAS;EACT,OAAO;EACP,QAAQ;EACR,QAAQ;EACR,aAAa;;AAIdA,IAAM,cAAW,SAAI,SAAc,SAAY;;cAAhB,CAAA;;cAAc,CAAA;SAAO,IAAI,QAAO,SAAC,SAAW;AAC1E,cAAU,OAAO,OAAO,CAAA,GAAI,gBAAgB,OAAO;AAGnDA,QAAM,SAAS,QAAQ,SAAS,IAAI,QAAQ,OAAM,IAAK,OAAO,SAAS,cAAc,QAAQ;AAC7FA,QAAM,QAAQ,QAAQ,SAAS,OAAO;AAGtCA,QAAM,SAAS,QAAQ,IAAG,SAAC,QAAA;AAAA,aAAU,IAAI,QAAO,SAAEC,UAAS,QAAW;AAErE,YAAI,OAAO,YAAY,SAAS,UAAU;AACzC,mBAAS,EAAE,KAAK,OAAM;;AAIvBD,YAAM,MAAM,IAAI,MAAK;AACrB,YAAI,cAAc,QAAQ;AAC1B,YAAI,UAAO,WAAA;AAAA,iBAAS,OAAO,IAAI,MAAM,qBAAsB,CAAC;QAAA;AAC5D,YAAI,SAAM,WAAA;AAAA,iBAASC,SAAQ,OAAO,OAAO,CAAA,GAAI,QAAQ,EAAA,IAAK,CAAE,CAAC;QAAA;AAC7D,YAAI,MAAM,OAAO;OACjB;IAAA,CAAC;AAGFD,QAAM,MAAM,OAAO,WAAW,IAAI;AAGlC,YAAQ,QAAQ,IAAI,MAAM,EACxB,KAAI,SAACE,SAAU;AAEfF,UAAM,UAAO,SAAG,KAAA;AAAA,eAAO,QAAQ,GAAG,KAAK,KAAK,IAAA,MAAG,MAAIE,QAAO,IAAG,SAAC,OAAA;AAAA,iBAAS,MAAM,IAAI,GAAG;QAAA,CAAC,CAAC;MAAA;AACtF,aAAO,QAAQ,QAAQ,OAAO;AAC9B,aAAO,SAAS,QAAQ,QAAQ;AAGhC,MAAAA,QAAO,QAAO,SAAC,OAAS;AACvB,YAAI,cAAc,MAAM,UAAU,MAAM,UAAU;AAClD,eAAO,IAAI,UAAU,MAAM,KAAK,MAAM,KAAK,GAAG,MAAM,KAAK,CAAC;OAC1D;AAED,UAAI,QAAQ,UAAU,QAAQ,WAAW,cAAc;AAEtD,eAAO,IAAI,QAAO,SAAED,UAAS,QAAW;AACvC,iBAAO,UAAU,QAAQ,QAAQ;YAChC,SAAS,QAAQ;YACjB,aAAa;aACb,SAAG,KAAK,MAAS;AACjB,gBAAI,KAAK;AACR,qBAAO,GAAG;AACV;;AAED,YAAAA,SAAQ,IAAI;WACZ;SACD;;AAIF,aAAO,OAAO,UAAU,QAAQ,QAAQ,QAAQ,OAAO;KACvD,CAAC;GACH;;;",
  "names": ["const", "resolve", "images"]
}
